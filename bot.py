import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.enums import ParseMode

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TOKEN = os.getenv("7765691064:AAGpZY2y9IhuJJTX5crdhaFdwOapvAyrH3Y")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
categories = {
    "iPhone": ["–î–∏—Å–ø–ª–µ–π", "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", "–°—Ç–µ–∫–ª–æ"],
    "Apple Watch": ["–î–∏—Å–ø–ª–µ–π", "–ö–æ—Ä–ø—É—Å"],
    "iPad": ["–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", "–°–µ–Ω—Å–æ—Ä"]
}

# –¢–æ–≤–∞—Ä—ã
products = {
    "iPhone / –¥–∏—Å–ø–ª–µ–π": [
        {"name": "–î–∏—Å–ø–ª–µ–π iPhone 16 Pro Max", "price": "30 000 —Ä—É–±.", "desc": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π", "photo": "https://via.placeholder.com/150"},
        {"name": "–î–∏—Å–ø–ª–µ–π iPhone 13", "price": "15 000 —Ä—É–±.", "desc": "–î–∏—Å–ø–ª–µ–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞", "photo": "https://via.placeholder.com/150"}
    ]
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup()
    for category in categories.keys():
        markup.add(InlineKeyboardButton(category, callback_data=f"cat_{category}"))
    return markup

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def subcategory_menu(category):
    markup = InlineKeyboardMarkup()
    for sub in categories.get(category, []):
        markup.add(InlineKeyboardButton(sub, callback_data=f"sub_{category}_{sub}"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(Command("start"))
async def start_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

# –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_subcategories(callback_query: types.CallbackQuery):
    category = callback_query.data.split("_")[1]
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {category}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategory_menu(category))

# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("sub_"))
async def show_products(callback_query: types.CallbackQuery):
    , category, subcategory = callback_query.data.split("")
    key = f"{category} / {subcategory}"
    
    if key in products:
        for item in products[key]:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{item['name']}"))
            await bot.send_photo(callback_query.from_user.id, item["photo"],
                                 caption=f"üìå {item['name']}\nüí∞ –¶–µ–Ω–∞: {item['price']}\nüìñ {item['desc']}", reply_markup=markup)
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –í –¥–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if _name_ == "_main_":
    asyncio.run(main())
